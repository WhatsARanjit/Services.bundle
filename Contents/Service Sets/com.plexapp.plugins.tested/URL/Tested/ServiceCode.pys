BASEURL = 'http://www.tested.com'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def TestURLs():

	test_urls = []
	page = HTML.ElementFromURL('http://www.tested.com/videos/')

	for url in page.xpath('//section[@class="content"]/ul/li/a/@href'):
		url = BASEURL + url

		if url not in test_urls:
			test_urls.append(url)

		if len(test_urls) > 2:
			break

	return test_urls

####################################################################################################
def GetExternalSource(url):

	# Find the appropriate video source
	page = HTML.ElementFromURL(url)

	try:
		youtube_url = page.xpath('//iframe[contains(@src, "youtube.com/embed/")]')[0].get('src')
	except:
		youtube_url = None

	return youtube_url

####################################################################################################
def MetadataObjectForURL(url):

	external_source = GetExternalSource(url)

	if external_source:
		return URLService.MetadataObjectForURL(external_source)
	else:
		return None

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = "1080",
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url = url, res = "1080"))]
		),
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = "720",
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url = url, res = "720"))]
		),
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = "480",
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url = url, res = "480"))]
		),
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = "sd",
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url = url, res = "sd"))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res):

	# Find the external source and the available media objects
	external_source = GetExternalSource(url)
	media = URLService.MediaObjectsForURL(external_source)

	resolutions = ["1080", "720", "480", "sd"]
	index = resolutions.index(res)

	for resolution_index in range(index, len(resolutions)):
		current_resolution = resolutions[resolution_index]

		for video in media:
			if video.container != Container.MP4 or video.video_codec != VideoCodec.H264:
				continue

			if str(video.video_resolution) == current_resolution:
				return Redirect(video.parts[0].key)

	return Redirect(media[-1].parts[0].key)
