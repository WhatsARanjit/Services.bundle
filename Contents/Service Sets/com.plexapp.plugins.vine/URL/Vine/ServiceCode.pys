MediaObject.container = Container.MP4
MediaObject.video_codec = VideoCodec.H264
MediaObject.audio_codec = AudioCodec.AAC
MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].split('/embed')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')

	if len(title) < 1:
		raise Ex.MediaNotAvailable

	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]
	date = html.xpath('//meta[@itemprop="uploadDate"]/@content')[0].split('T')[0]
	originally_available_at = Datetime.ParseDate(date).date()

	return VideoClipObject(
		title = title[0],
		thumb = Resource.ContentsOfURLWithFallback(url=thumb),
		originally_available_at = originally_available_at
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			],
			video_resolution = '480',
			width = 480,
			height = 480
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	video_url = html.xpath('//*[@itemtype="http://schema.org/VideoObject"]//meta[@itemprop="contentURL"]/@content')

	if len(video_url) > 0:
		return IndirectResponse(VideoClipObject, key=video_url[0].replace('https://', 'http://'))

	raise Ex.MediaNotAvailable
