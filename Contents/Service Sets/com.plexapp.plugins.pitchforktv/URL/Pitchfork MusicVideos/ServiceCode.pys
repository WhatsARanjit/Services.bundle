RE_VIDEO_ID = Regex("/video/(?P<id>[0-9]+)")

####################################################################################################
def MetadataObjectForURL(url):

    # The MusicVideos come from external sources, e.g. YouTube and Vimeo. Therefore we just need
    # to determine the source's url and redirect to the appropriate URL Service.
    external_source = GetExternalSource(url)
    return URLService.MetadataObjectForURL(external_source)

####################################################################################################
def MediaObjectsForURL(url):
    return [
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = "1080",
        optimized_for_streaming = True,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = "1080"))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = "720",
        optimized_for_streaming = True,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = "720"))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = "480",
        optimized_for_streaming = True,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = "480"))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = "sd",
        optimized_for_streaming = True,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = "sd"))]
      )
    ]

####################################################################################################
@indirect
def PlayVideo(url, res):

    # Find the external source and the available media objects.
    external_source = GetExternalSource(url)
    media = URLService.MediaObjectsForURL(external_source)

    # Since we are actually implementing an @indirect function, and Vimeo and YouTube also use these,
    # we should be able to select a suitable callback for the requested resolution and simply return
    # it. The client will then continue and invoke the next callback again.
    resolutions = ["1080", "720", "480", "sd"]
    index = resolutions.index(res)
    for resolution_index in range(index, len(resolutions)):
        current_resolution = resolutions[resolution_index]
        for video in media:
            if str(video.video_resolution) == current_resolution:
                return Redirect(video.parts[0].key)

    # If we can't find the specific low resolution one that was requested, we will return the lowest,
    # which would normally be 480.
    return Redirect(media[-1].parts[0].key)

####################################################################################################
def GetExternalSource(url):

    # Translate the given url to the valid AJAX page
    if url.endswith('/') == False:
        url = url + '/'
    url = url + 'ajax/'
    page = HTML.ElementFromURL(url, headers = {'X-Requested-With': 'XMLHttpRequest'})

    # We need to handle html which either contains an iframe or an embed element which contains the
    # actual video source url.
    video = None
    videos = page.xpath("//iframe")
    if len(videos) == 1:
        video = videos[0].get('src')
    else:
        video = page.xpath("//embed")[0].get('src')

    # The Vimeo url will actually be to the specific player. However, the URL Service will need to 
    # HTML information page. Therefore we must extract the video identifier before then re-constructing
    # an appropriate url.
    if video.startswith("http://player.vimeo.com/") == True:
        video_id = RE_VIDEO_ID.search(video).group('id')
        video = 'http://www.vimeo.com/' + video_id

    # Return the source of the embedded object.
    return video
