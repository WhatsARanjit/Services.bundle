####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    try:
        if 'apl.tv' in url:
            pageElement = HTML.ElementFromURL(url)
            
            title   = pageElement.xpath('//meta[@property="og:title"]')[0].get('content')
            summary = pageElement.xpath('//meta[@name="description"]')[0].get('content')
            thumb   = pageElement.xpath('//meta[@property="og:image"]')[0].get('content')
            
            return EpisodeObject(
                title = title,
                summary = summary,
                thumb = thumb
            )
        else:
            [title, show, summary, duration, thumb, art, id] = GetVideoDetails(url)
        
            return EpisodeObject(
                title = title,
                show = show,
                summary = summary,
                duration = duration,
                thumb = thumb,
                art = art
            )
        
    except:
        return None

####################################################################################################
def MediaObjectsForURL(url):
    mediaObjs = []

    if 'apl.tv' in url:
        mediaObjs.append(
            MediaObject(
                container               = 'mpegts',
                video_codec             = VideoCodec.H264,
                audio_codec             = AudioCodec.AAC,                 
                audio_channels          = 2,
                optimized_for_streaming = True,
                parts                   = [
                    PartObject(
                        key = HTTPLiveStreamURL(Callback(PlayLive, url = url))
                    )
                ]
            )
        )
        
    else:
        mediaObjs.append(
            MediaObject(
                container               = 'mpegts',
                video_codec             = VideoCodec.H264,
                audio_codec             = AudioCodec.AAC,
                audio_channels          = 2,
                video_resolution        = '720',
                optimized_for_streaming = True,
                parts                   = [
                    PartObject(
                        key = HTTPLiveStreamURL(Callback(PlayHLS, url = url))
                    )
                ]
            )
        )

    return mediaObjs
    
####################################################################################################
def GetVideoDetails(url):
    pageContent = HTTP.Request(url).content
        
    title   = Regex('.*\"episodeTitle\" *: *\"(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(pageContent).groups()[0]
    show    = Regex('.*\"programTitle\" *: *\"(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(pageContent).groups()[0]
    summary = Regex('.*\"videoCaption\" *: *\"(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(pageContent).groups()[0]
        
    try:
        duration = int(Regex('.*\"duration\" *: *([0-9]+).*', Regex.IGNORECASE|Regex.MULTILINE).search(pageContent).groups()[0].strip()) * 1000
    except:
        duration = None
        
    thumb = Regex('.*\"thumbnailURL\" *: *\"(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(pageContent).groups()[0]
    art   = Regex('.*\"videoStillURL\" *: *\"(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(pageContent).groups()[0]
    id    = Regex('.*\"clipRefId\" *: *\"(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(pageContent).groups()[0]
    
    return [
            title,
            show,
            summary,
            duration,
            thumb,
            art,
            id
    ]

####################################################################################################
@indirect
def PlayLive(url):
    try:
        pageElement     = HTML.ElementFromURL(url)
        videoUStreamURL = pageElement.xpath("//div[contains(@class, 'video-container')]//iframe/@src")[0]
        videoID         = Regex('(?<=embed/)[0-9]+').search(videoUStreamURL).group(0)
        hlsurl          = 'http://iphone-streaming.ustream.tv/ustreamVideo/%s/streams/live/playlist.m3u8' % videoID
    except:
        raise Ex.MediaNotAvailable
   
    return IndirectResponse(
        VideoClipObject,
        key = HTTPLiveStreamURL(GetClientDependentURL(hlsurl))
    )

####################################################################################################
@indirect
def PlayHLS(url):
    try:
        pageContent = HTTP.Request(url).content
        hlsurl      = Regex('.*"m3u8" *: *"(http.*)".*').search(pageContent).groups()[0]
    except:
        raise Ex.MediaNotAvailable

    return IndirectResponse(
        VideoClipObject,
        key = HTTPLiveStreamURL(GetClientDependentURL(hlsurl))
    )

####################################################################################################
def GetClientDependentURL(url):
    if Client.Platform in ['MacOSX', 'Windows']:
        streams = GetHLSStreams(url)
    
        # Return highest bitrate url since PMC can't handle HLS correctly
        return streams[0]['url']
    else:
        # Other clients can handle HLS correctly
        return url 

####################################################################################################
def GetHLSStreams(url):
    streams = []

    playList = HTTP.Request(url).content

    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in playList.splitlines():
        if "BANDWIDTH" in line:
            stream            = {}
            stream["bitrate"] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))        

            if "RESOLUTION" in line:
                stream["resolution"] = int(Regex('(?<=RESOLUTION=)[0-9]+x[0-9]+').search(line).group(0).split("x")[1])
            else:
                stream["resolution"] = 0

        elif ".m3u8" in line:
            path = ''
            if not line.startswith("http://"):
                path          = url[ : url.rfind('/') + 1]
            
            stream["url"] = path + line
                    
            streams.append(stream)
                
    sorted_streams = sorted(streams, key = lambda stream: stream["bitrate"], reverse = True)        
    
    return sorted_streams

