RE_DATA_URL = Regex("'dataURL','([^']+.xml)'")

####################################################################################################

def MetadataObjectForURL(url):
  
  details = HTML.ElementFromURL(url)

  desc = details.xpath('//meta[@property="og:description"]')[0].get('content')
  thumb = details.xpath('//meta[@property="og:image"]')[0].get('content')
  title = details.xpath('//meta[@property="og:title"]')[0].get('content')
  
  album = PhotoAlbumObject(
      key = Callback(GetPhotos, url=url),
      title = title,
      summary = desc,
      thumb = thumb
    )
  return album
    
####################################################################################################

def MediaObjectsForURL(url):
  return [
    MediaObject
      (
        parts = Callback(GetPhotos, url)
      )
    ]

####################################################################################################
  
def GetPhotos(url):
  c = ObjectContainer()
  data = HTTP.Request(url).content
  url = RE_DATA_URL.findall(data)[0]
  image = 1
  for photo in XML.ElementFromURL(url).xpath('//photo'):
    summary = photo.find('caption').text
    if summary != None and len(summary) > 0:
      summary = String.StripTags(summary)
    c.add(PhotoObject(
        key = photo.find('url').text,
        title = 'Photo %d' % image,
        #directors = photo.find('credit').text, '''assigning directors to PhotoObjects doesn't seem to be supported currently'''
        summary = summary,
        thumb = photo.find('url').text
        )
      )
    image += 1
  
  return c