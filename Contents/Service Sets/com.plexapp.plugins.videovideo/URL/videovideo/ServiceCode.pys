def NormalizeURL(url):

	return url.rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

	yt_iframe = HTML.ElementFromURL(url).xpath('//iframe[contains(@src, "youtube.com")]')

	if len(yt_iframe) < 1:
		raise Ex.MediaNotAvailable

	return URLService.MetadataObjectForURL(yt_iframe[0].get('src'))

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '1080',
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='1080'))]
		),
		MediaObject(
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '720',
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='720'))]
		),
		MediaObject(
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '360',
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='360'))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res):

	yt_iframe = HTML.ElementFromURL(url).xpath('//iframe[contains(@src, "youtube.com")]')

	if len(yt_iframe) < 1:
		raise Ex.MediaNotAvailable

	media = URLService.MediaObjectsForURL(yt_iframe[0].get('src'))
	resolutions = ['1080', '720', '360']
	index = resolutions.index(res)

	for resolution_index in range(index, len(resolutions)):
		current_resolution = resolutions[resolution_index]

		for video in media:
			if video.container != Container.MP4 or video.video_codec != VideoCodec.H264:
				continue

			if str(video.video_resolution) == current_resolution:
				return Redirect(video.parts[0].key)

	return Redirect(media[-1].parts[0].key)
