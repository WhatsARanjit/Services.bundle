DETAILS_URL = 'http://metaframe.digitalsmiths.tv/v2/CWtv/assets/%s/partner/53?format=json'
BITRATES = [300, 500, 700, 900]
BASE_URL = 'http://www.cwtv.com'

CW_SWF = 'http://pdl.warnerbros.com/cwtv/digital-smiths/production_player/vsplayer.swf'

THUMB_PROXY = 'http://www.uswebproxy.com/?q=%s'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = GetDetails(url)

	if not data:
		return None

	video = data['assetFields']

	epTitle = video['title']
	show = video['seriesName']

	try:
		epIndex = int(video['episodeNumber'])
	except:
		epIndex = None

	try:
		season = int(video['seasonNumber'])
	except:
		season = None

	summary = video['description']

	rating = float(video['rating'])
	if rating == 0:
		rating = None

	try:
		date = Datetime.ParseDate(video['originalAirDate'])
	except:
		date = None

	try:
		duration = int(video['duration']) * 1000
	except:
		duration = None

	thumb = GetThumb(url)
	thumb_alt = THUMB_PROXY % String.Base64Encode(thumb)

	if video['contentType'] == "Full Episodes":    
		return EpisodeObject(
			title = epTitle,
			show = show,
			index = epIndex,
			season = season,
			summary = summary,
			rating = rating,
			originally_available_at = date,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback([thumb, thumb_alt])
		)
	else:
		return VideoClipObject(
			title = epTitle,
			summary = summary,
			rating = rating,
			originally_available_at = date,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback([thumb, thumb_alt])
		)

####################################################################################################
def MediaObjectsForURL(url):

	items = []

	for value in reversed(BITRATES):
		items.append(
			MediaObject(
				bitrate = value,
				protocol = 'rtmp',
				parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=value))]
			)
		)

	return items

####################################################################################################
@indirect
def PlayVideo(url, bitrate):

	available_bitrates = []
	rtmp_url = None
	videos = GetDetails(url)['videos']

	for video in videos:
		available_bitrates.append(int(videos[video]['bitrate']))

	closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]

	for video in videos:
		if closest == int(videos[video]['bitrate']):
			rtmp_url = videos[video]['uri']
			break

	if rtmp_url:
		rtmp_parts = rtmp_url.partition('mp4:')
		player = rtmp_parts[0]
		playpath = rtmp_parts[1] + rtmp_parts[2]

		return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=playpath, swf_url=CW_SWF))
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def GetDetails(url):

	id = None

	if '?play=' in url:
		id = url.split('?play=')[1]
	else:
		html = HTML.ElementFromURL(url)
		current_url = html.xpath('//meta[@property="og:url"]', namespaces={'og': 'http://opengraphprotocol.org/schema/'})

		if current_url:
			url = current_url[0].get('content')
			if '?play=' in url:
				id = url.split('?play=')[1]

	if id:
		try:
			details = JSON.ObjectFromURL(DETAILS_URL % id)
			return details
		except:
			raise Ex.MediaExpired
	else:
		return None

####################################################################################################
def GetThumb(url):

	images = GetDetails(url)['images']
	width = 0

	for key in images.keys():
		if images[key]['width'] > width:
			thumb = images[key]['uri']
			width = images[key]['width']

	return thumb

####################################################################################################
def TestURLs():

	test_urls = []
	data = HTML.ElementFromURL(BASE_URL + '/cw-video/')

	for url in data.xpath('//a[contains(@href, "?play")]/@href'):
		test_urls.append(BASE_URL + url)

		if len(test_urls) > 2:
			break

	return test_urls
